@using System.Text.Json;
@using ArkLens.Models.Drafts;
@using System.Text;
@using ArkLens.Models.Snapshots;
@using ArkLens.Models.SvgFiles;
@inherits CharacterElementComponentBase
@inject HttpClient Http
@inject AuthenticationStateProvider Auth
@inject IJSRuntime JS

<button @onclick="async _ => await DownloadJsonAsync()">
	📩 JSON
</button>
<button @onclick="async _ => await DownloadSvgAsync()">
	📩 SVG
</button>

<button 
	@onclick="async _ => await SendToServerAsync()"
	disabled="@(AuthState.IsAuthOk() is false)"
	title="@(AuthState.IsAuthOk() ? "Нажмите чтобы сохранить персонажа на сервер." : "Чтобы сохранять персонажей нужно авторизоваться.")">
	☁
</button>
@(Response is null ? string.Empty : Response.IsSuccessStatusCode ? "✔" : "❌")

@code {
	private HttpResponseMessage? Response { get; set; }
	private AuthenticationState AuthState { get; set; } = null!;

	private async ValueTask SendToServerAsync()
	{
		var snapshot = new CharacterSnapshot().FillFrom(Draft);

		Response = await Http.PostAsJsonAsync("api/Characters", snapshot);
		if (Response.IsSuccessStatusCode is false)
		{
			string message = $"{Response.StatusCode}: {Response.ReasonPhrase ?? "???"}";
			await JS.AlertAsync(message);
		}
	}

	#region Downloads

	private async ValueTask DownloadJsonAsync()
	{
		JsonSerializerOptions jsonOptions = new()
		{
			WriteIndented = true,
			Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
		};
		string json = JsonSerializer.Serialize(Draft, jsonOptions);

		using var stream = new MemoryStream(Encoding.UTF8.GetBytes(json));
		string fileName = $"{Draft.Name}.AL.json";

		await JS.DownloadFileAsync(stream, fileName);
	}

	private async ValueTask DownloadSvgAsync()
	{
		string svg = CharacterDraftSvg.GetOrCreate(Draft).Result;
		using var stream = new MemoryStream(Encoding.UTF8.GetBytes(svg));
		string fileName = $"{Draft.Name}.AL.svg";

		await JS.DownloadFileAsync(stream, fileName);
	}

	#endregion

	protected override async Task OnInitializedAsync()
	{
		AuthState = await Auth.GetAuthenticationStateAsync();
	}
}
